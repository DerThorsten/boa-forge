name: CI

on:
  workflow_dispatch:
  push:
  pull_request:
    branches:
      - master

jobs:
  build_libraries_unix:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: install mamba
        uses: mamba-org/provision-with-micromamba@main
      - name: Cache build outputs
        uses: actions/cache@v2
        with:
          path: |
            ~/micromamba/envs/buildenv/conda-bld/**/*tar.bz2
          key: build-cache-${{ runner.os }}
      - name: create .condarc
        shell: bash
        run: |
          cat > ~/.condarc <<EOL
          channels:
            - conda-forge
          EOL
      - name: build zlib
        shell: bash -l -eo pipefail {0}
        run: |
          boa build zlib --features [static] --skip-existing
      - name: build bzip2
        shell: bash -l -eo pipefail {0}
        run: |
          boa build bzip2 --features [static] --skip-existing
      - name: build libiconv
        shell: bash -l -eo pipefail {0}
        run: |
          boa build libiconv --features [static] --skip-existing
        if: runner.os == 'macOS'
      - name: build zstd
        shell: bash -l -eo pipefail {0}
        run: |
          boa build zstd --features [static] --skip-existing
      - name: build yaml-cpp
        shell: bash -l -eo pipefail {0}
        run: |
          boa build yaml-cpp --features [static] --skip-existing
      - name: build reproc
        shell: bash -l -eo pipefail {0}
        run: |
          boa build reproc --features [static] --skip-existing
      - name: build libarchive
        shell: bash -l -eo pipefail {0}
        run: |
          boa build libarchive \
              --skip-existing \
              --features "[static,zlib,zstd,bzip2,~openssl,~xml2,~lz4,~lzo,~xz]"
      - name: build openssl
        shell: bash -l -eo pipefail {0}
        run: |
          boa build openssl --features [static] --skip-existing
      - name: build libssh2
        shell: bash -l -eo pipefail {0}
        run: |
          boa build libssh2 --features [static] --skip-existing
      - name: build libsolv
        shell: bash -l -eo pipefail {0}
        run: |
          boa build libsolv --features [static] --skip-existing
      - name: build curl
        shell: bash -l -eo pipefail {0}
        run: |
          boa build curl --features [static] --skip-existing
      - name: build micromamba
        shell: bash -l -eo pipefail {0}
        run: |
          cd micromamba_recipe
          boa build . --skip-existing
      - name: build micromamba-nightly
        shell: bash -l -eo pipefail {0}
        run: |
          export NIGHTLY_VERSION=`date +%y.%-m.%-d`
          cp micromamba_recipe/recipe_nightly.yaml micromamba_recipe/recipe.yaml
          cd micromamba_recipe
          boa build . --skip-existing
      - uses: actions/upload-artifact@v2
        with:
          name: micromamba_pkgs
          path: ~/micromamba/envs/buildenv/conda-bld/**/*.tar.bz2 # or path/to/artifact

  build_libraries_win:
    runs-on: [windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: install mamba
        uses: mamba-org/provision-with-micromamba@main
      - name: Cache build outputs
        uses: actions/cache@v2
        with:
          path: |
            ~/micromamba/envs/buildenv/conda-bld/**/*tar.bz2
          key: build-cache-${{ runner.os }}
      - name: create .condarc
        shell: bash
        run: |
          cat > ~/.condarc <<EOL
          channels:
            - conda-forge
            - defaults
          EOL
      - name: build zlib
        shell: powershell
        run: |
          boa build zlib --features "[static]" --skip-existing
      - name: build bzip2
        shell: powershell
        run: |
          boa build bzip2 --features "[static]" --skip-existing
      - name: build zstd
        shell: powershell
        run: |
          boa build zstd --features "[static]" --skip-existing
      - name: build yaml-cpp
        shell: powershell
        run: |
          boa build yaml-cpp --features "[static]" --skip-existing
      - name: build reproc
        shell: powershell
        run: |
          boa build reproc --features "[static]" --skip-existing
      - name: build libarchive
        shell: powershell
        run: |
          boa build libarchive --features "[static,zlib,zstd,bzip2,~openssl,~xml2,~lz4,~lzo,~xz]" --skip-existing
      - name: build openssl
        shell: powershell
        run: |
          boa build openssl --features "[static]" --skip-existing
      # - name: build libssh2
      #   shell: powershell
      #   run: |
      #     boa build libssh2 --features "[static]" --skip-existing
      - name: build libsolv
        shell: powershell
        run: |
          boa build libsolv --features "[static]" --skip-existing
      - name: build curl
        shell: powershell
        run: |
          boa build curl --features "[static]" --skip-existing
      - name: build micromamba
        shell: powershell
        run: |
          cd micromamba_recipe
          boa build .  --skip-existing
      - name: build micromamba-nightly
        shell: powershell
        run: |
          $Env:NIGHTLY_VERSION=Get-Date -F y.M.d
          cp micromamba_recipe\recipe_nightly.yaml micromamba_recipe\recipe.yaml
          cd micromamba_recipe
          boa build .  --skip-existing
      - uses: actions/upload-artifact@v2
        with:
          name: micromamba_pkgs
          path: ~/micromamba/envs/buildenv/conda-bld/**/*.tar.bz2 # or path/to/artifact
  make_release_and_upload:
    needs: [build_libraries_unix, build_libraries_win]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/download-artifact@v2
        with:
          name: micromamba_pkgs
          path: ~/micromamba_pkgs
      - name: Get current date
        id: date
        run: echo "::set-output name=date_now::$(date +'%Y.%m.%d.%H%M')"
      - name: Extract micromamba binaries
        shell: bash -x {0}
        id: get_micromamba
        run: |
          python $GITHUB_WORKSPACE/get_latest_conda_package.py
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: micromamba-${{ steps.get_micromamba.outputs.micromamba_version }}
          release_name: micromamba-release-${{ steps.date.outputs.micromamba_version }}
          body: |
            Nightly release of micromamba

            Version:
              Linux:   ${{ steps.get_micromamba.outputs.linux_64_pkg }}
              OS X:    ${{ steps.get_micromamba.outputs.osx_64_pkg }}
              Windows: ${{ steps.get_micromamba.outputs.win_64_pkg }}
          draft: false
          prerelease: false
      - name: Upload Release Assets Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/micromamba-linux/bin/micromamba
          asset_name: micromamba-linux-64
          asset_content_type: application/exe
      - name: Upload Release Assets Win
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/micromamba-win/Library/bin/micromamba.exe
          asset_name: micromamba-win-64.exe
          asset_content_type: application/exe
      - name: Upload Release Assets OSX
        id: upload-release-asset-osx
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/micromamba-osx/bin/micromamba
          asset_name: micromamba-osx-64
          asset_content_type: application/exe
